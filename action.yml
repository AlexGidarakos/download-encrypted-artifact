name: Download Encrypted Artifact
description: >
  Download and decrypt artifacts previously created with upload-encrypted-artifact
  Ref. https://github.com/AlexGidarakos/upload-encrypted-artifact
author: Alexandros Gidarakos

branding:
  icon: unlock
  color: green

inputs:
  github-token:
    description: >
      The GitHub token used to authenticate with the GitHub API.
      This is required when downloading artifacts from a different repository or from a different workflow run.
      If unspecified, the action will download artifacts from the current repo and the current workflow run.
    required: false
    default: ${{ github.token }}
  repository:
    description: >
      The repository owner and the repository name joined together by "/".
      If github-token is specified, this is the repository that artifacts will be downloaded from.
    required: false
    default: ${{ github.repository }}
  remote-name:
    description: Name of the remote artifact in GitHub
    required: true
  destination:
    description: Directory where the decrypted contents of the artifact will be extracted
    required: false
    default: $GITHUB_WORKSPACE
  password:
    description: Original text password used to encrypt the artifact before it was uploaded to GitHub
    required: true
  reset-retention:
    description: >
      If set to true, the action operates in a special mode that skips the decryption and decompression steps,
      uploads the artifact again to GitHub and overwrites the old copy, resulting in a new artifact ID. This resets
      the artifact's retention period and when run on a regular schedule, circumvents GitHub's artifact retention limits.
    required: false
    default: false

outputs:
  artifact-id:
    description: If reset-retention is true, this output will be the ID of the new artifact copy and can be used with the GitHub REST API
    value: ${{ steps.upload.outputs.artifact-id }}
  artifact-url:
    description: If reset-retention is true, this output will be the URL to download the new artifact copy
    value: ${{ steps.upload.outputs.artifact-url }}

runs:
  using: composite

  steps:
    - name: Print Inputs
      shell: bash
      run: |
        echo "DEBUG: Printing values of input variables"
        echo "${{ toJSON(inputs) }}"

    - name: Get Workflow Run ID
      id: get-workflow-run-id
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        gh_api_artifacts="/repos/${{ inputs.repository }}/actions/artifacts"
        jq_query="[.artifacts[] | select(.name==\"${{ inputs.remote-name }}\")] | sort_by(-.id).[0].workflow_run.id"
        echo "INFO: Getting workflow run ID of the most recent artifact"
        response=$(gh api ${gh_api_artifacts} -q "${jq_query}")
        if [ "${response}" == "null" ]; then
          echo "ERROR: Failed to get workflow run ID of the most recent artifact"
          exit 1
        else
          echo "INFO: Workflow run ID of the most recent artifact is ${response}"
          echo "workflow_run_id=${response}" >> "$GITHUB_OUTPUT"
        fi

    - name: Create Temporary Destination Directory
      shell: bash
      run: |
        echo "INFO: Creating temporary destination directory"
        temp_destination=$(mktemp -d /tmp/XXXXXXXXX)
        echo "temp_destination=${temp_destination}" >> "$GITHUB_ENV"

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.remote-name }}
        path: ${{ env.temp_destination }}
        github-token: ${{ inputs.github-token }}
        repository: ${{ inputs.repository }}
        run-id: ${{ steps.get-workflow-run-id.outputs.workflow_run_id }}

    - name: Get Local Artifact Name
      shell: bash
      run: |
        echo "INFO: Geting local artifact name"
        echo "local_name=${temp_destination}/$(ls ${temp_destination}/)" >> "$GITHUB_ENV"

    - name: Create Destination Directory
      if: ${{ inputs.reset-retention == 'false' }}
      shell: bash
      run: |
        if [ ! -d "${{ inputs.destination }}" ]; then
          echo "INFO: Creating destination directory"
          mkdir -p "${{ inputs.destination }}"
        fi

    - name: Decrypt and Decompress Artifact
      if: ${{ inputs.reset-retention == 'false' }}
      shell: bash
      run: |
        echo "INFO: Decrypting and decompressing artifact"
        7z x -so "$local_name" -p"${{ inputs.password }}" | tar xf - -C "${{ inputs.destination }}"

    - name: Check Artifact Contents
      if: ${{ inputs.reset-retention == 'false' }}
      shell: bash
      run: |
        echo "INFO: Checking artifact contents"
        ls -l "${{ inputs.destination }}"

    - name: Upload Artifact
      id: upload
      if: ${{ inputs.reset-retention == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.remote-name }}
        path: ${{ env.local_name }}
        if-no-files-found: error
        compression-level: 0  # No compression needed as the local artifact is already compressed
        overwrite: true
